pipeline {
    agent any
    environment {
        GITNAME = 'hansususu'
        GITEMAIL = 'hansubin0039@gmail.com'
        GITWEBADD = 'https://github.com/Bombi-goorm/BomNet.git'
        GITSSHADD = 'git@github.com:Bombi-goorm/BomArgo.git'

        AWS_CREDENTIAL_NAME = 'aws_cre'
        ECR_PATH = '575108933149.dkr.ecr.ap-northeast-2.amazonaws.com'
        IMAGE_NAME = '575108933149.dkr.ecr.ap-northeast-2.amazonaws.com/bombi/frontend'
        REGION = 'ap-northeast-2'

        GITCREDENTIAL = 'git_cre'
        DOCKERHUBCREDENTIAL = 'docker_cre'
        SLACK_CHANNEL = "jenkins"
        SLACK_START_AND_FINISH_COLOR = "#778899";
        SLACK_SUCCESS_COLOR = "#2C953C";
        SLACK_FAIL_COLOR = "#FF3232";
    }
    stages {
        stage('Checkout Github') {
            steps {
                dir('frontend') {
                    checkout([$class: 'GitSCM', branches: [[name: '*/v1.0.0']],
                    userRemoteConfigs: [[
                        credentialsId: GITCREDENTIAL, 
                        url: GITWEBADD
                    ]]])
                }
            }
            post{
                success {
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_SUCCESS_COLOR,
                        message: "==================================================================\nGit Checkout에 성공하였습니다."
                    )
                    sh "echo clone success"
                }
                failure {
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_FAIL_COLOR,
                        message: "Git Checkout에 실패하였습니다.\n" +
                        "\n" +
                        "<-More info->\n" +
                        "${env.BUILD_URL}console\n" +
                        "=================================================================="
                    )
                    sh "echo clone failed"
                }
            }
        }
        stage('docker image build') {
            steps {
                sh "docker build -t ${IMAGE_NAME}:${currentBuild.number} -f frontend/Dockerfile frontend/"
                sh "docker build -t ${IMAGE_NAME}:latest -f frontend/Dockerfile frontend/"
            }
            post {
                failure {
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_FAIL_COLOR,
                        message: "Docker Image Build에 실패하였습니다.\n" +
                        "\n" +
                        "<-More info->\n" +
                        "${env.BUILD_URL}console\n" +
                        "=================================================================="
                    )
                    sh "echo image build failed"
                }
                success {
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_SUCCESS_COLOR,
                        message: "Dcker Image Build에 성공하였습니다."
                    )
                    sh "echo image build success"
                }
            }
        }
        stage('docker image push') {
            steps {
                script{
                    sh 'aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ECR_PATH}'

                    // cleanup current user docker credentials
                    // sh 'rm -f ~/.dockercfg ~/.docker/config.json || true'
                    
                   
                    docker.withRegistry("https://${ECR_PATH}", "ecr:${REGION}:${AWS_CREDENTIAL_NAME}") {
                      docker.image("${IMAGE_NAME}:${BUILD_NUMBER}").push()
                      docker.image("${IMAGE_NAME}:latest").push()
                    }

                }
            }
            post {
                failure {
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_FAIL_COLOR,
                        message: "ECR에 Image Push를 실패하였습니다.\n" +
                        "\n" +
                        "<-More info->\n" +
                        "${env.BUILD_URL}console\n" +
                        "=================================================================="
                    )
                    sh "docker image rm -f ${IMAGE_NAME}:${currentBuild.number}"
                    sh "docker image rm -f ${IMAGE_NAME}:latest"
                    sh "echo push failed"
                }
                success {
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_SUCCESS_COLOR,
                        message: "ECR에 Image Push를 성공하였습니다."
                    )
                    sh "docker image rm -f ${IMAGE_NAME}:${currentBuild.number}"
                    sh "docker image rm -f ${IMAGE_NAME}:latest"
                    sh "echo push success"
                }
            }
        }
        stage('EKS manifest file update') {
            steps {
                git credentialsId: GITCREDENTIAL, url: GITSSHADD, branch: 'main'
                sh "git config --global user.email ${GITEMAIL}"
                sh "git config --global user.name ${GITNAME}"
                sh "sed -i 's@${IMAGE_NAME}:.*@${IMAGE_NAME}:${currentBuild.number}@g' front/fron-deployment.yaml"

                sh "git add ."
                sh "git branch -M main"
                sh "git commit -m 'fixed tag ${currentBuild.number}'"
                sh "git remote remove origin"
                sh "git remote add origin ${GITSSHADD}"
                sh "git push origin main"
            }
            post {
                failure {
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_FAIL_COLOR,
                        message: "Manifest File 변경을 실패하였습니다.\n" +
                        "\n" +
                        "<-More info->\n" +
                        "${env.BUILD_URL}console\n" +
                        "=================================================================="
                    )
                    sh "echo manifest update failed"
                }
                success {
                    success {
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_SUCCESS_COLOR,
                        message: "Manifest File 변경을 성공하였습니다."
                    )
                    sh "echo manifest update success"
                }
            }
        }

    }
}
}
