services:

  # Frontend
  frontend:
    build: ./frontend
    container_name: front
    ports:
      - "5173:5173"
    networks:
      - bomnet

  # Database

  mariadb:
    image: mariadb:10.6
    container_name: mariadb
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: bomnet_db
    ports:
      - "3307:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - mariadb_data:/var/lib/mysql
    networks:
      - bomnet

  # Backend
  auth-server:
    build: ./backend/auth
    container_name: auth-server
    ports:
      - "8180:8180"
    depends_on:
      - mariadb
    networks:
      - bomnet

  core-server:
    build: ./backend/core
    container_name: core-server
    ports:
      - "8181:8181"
    depends_on:
      - mariadb
    networks:
      - bomnet

  llm-server:
    build: ./backend/llm
    container_name: llm-server
    ports:
      - "8182:8182"
    depends_on:
      - mariadb
    networks:
      - bomnet
    volumes:
      - ./backend/llm:/app

  bridge-server:
    build: ./backend/bridge
    container_name: bridge-server
    ports:
      - "8183:8183"
    depends_on:
      - mariadb
    networks:
      - bomnet
    volumes:
      - ./backend/bridge:/app

  notification-server:
    build: ./backend/notification
    container_name: notification-server
    ports:
      - "8184:8184"
    depends_on:
      - mariadb
    networks:
      - bomnet

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    depends_on:
      auth-server:
        condition: service_started
      core-server:
        condition: service_started
    networks:
      - bomnet

  # RabbitMQ Service
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    networks:
      - bomnet

  # Jenkins Service
  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    ports:
      - "8888:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
    networks:
      - bomnet

  # Fluent Bit Service
  fluent-bit:
    image: fluent/fluent-bit:latest
    container_name: fluent-bit
    depends_on:
      - elasticsearch
    volumes:
      - ./fluent_bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
    networks:
      - bomnet

  # Elasticsearch Service
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - bomnet

  # Kibana Service
  kibana:
    image: docker.elastic.co/kibana/kibana:8.5.0
    container_name: kibana
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    networks:
      - bomnet

  # Airflow Service
  airflow:
    image: apache/airflow:2.5.1
    container_name: airflow
    ports:
      - "8080:8080"
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: mysql+pymysql://root:1234@mariadb:3306/bomnet_db
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    volumes:
      - airflow_data:/opt/airflow
    networks:
      - bomnet

volumes:
  mariadb_data:
  jenkins_home:
  airflow_data:

networks:
  bomnet:
    name: bomnet
    driver: bridge

# docker rmi -f $(docker images -q) - 모든이미지 삭제
# docker rm $(docker ps -aq) - 모든 컨테이너 삭제
# docker network prune -f - 기본 네트워크 제외 모든 네트워크 삭제
# docker-compose up -d --build -  빌드 후 실행
# docker-compose down - 실행중지
# docker builder prune -a - 빌드캐시삭제
# docker-compose restart {컨테이너 이름} - 특정 컨테이너 재시작