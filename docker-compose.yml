services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: bomnet_db
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - bomnet

  auth-server:
    build: ./backend/auth_server
    container_name: auth-server
    ports:
      - "8080:8080"
    depends_on:
      - mysql
    networks:
      - fintech

  core-server:
    build: ./backend/core_server
    container_name: core-server
    ports:
      - "8081:8081"
    depends_on:
      - mysql
    networks:
      - bomnet
  bridge-server:
    build: ./backend/bridge-server
    container_name: bridge-server
    ports:
      - "8082:8082"
    depends_on:
      - mysql
    networks:
      - bomnet

  llm-server:
    build: ./backend/llm_server
    container_name: llm-server
    ports:
      - "8083:8083"
    depends_on:
      - mysql
    networks:
      - bomnet

  notification-server:
    build: ./backend/notification
    container_name: notification
    ports:
      - "8084:8084"
    depends_on:
      - mysql
    networks:
      - bomnet

  data-server:
    build: ./backend/data_server
    container_name: data_server
    ports:
      - "8084:8084"
    depends_on:
      - mysql
    networks:
      - bomnet

  frontend:
    build: ./frontend
    container_name: front
    ports:
      - "5173:5173"
    networks:
      - bomnet

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    depends_on:
      auth-server:
        condition: service_started
      core-server:
        condition: service_started
    networks:
      - bomnet

volumes:
  mysql_data:

networks:
  fintech:
    driver: bridge

# docker rmi -f $(docker images -q) - 모든이미지 삭제
# docker images | grep msa | awk '{print $3}' | xargs docker rmi -f - msa가 이름에 포함된 이미지 삭제
# docker rm $(docker ps -aq) - 모든 컨테이너 삭제
# docker network prune -f - 기본 네트워크 제외 모든 네트워크 삭제
# docker-compose up -d --build -  빌드 후 실행
# docker-compose down - 실행중지
# docker builder prune -a - 빌드캐시삭제
# docker-compose restart {컨테이너 이름} - 특정 컨테이너 재시작